worker_processes  1;
error_log logs/error.log info;
events {
  worker_connections 1024;
}
http {

  lua_package_path "$prefix/api-gateway/lua/?.lua;$prefix/api-gateway/lua/api_gateway/?.lua;$prefix/api-gateway/lua/vendor/?.lua;;";
  init_by_lua_block {
    require "apigatewayserver"
  }

  server {
    listen       8080 default_server;
    server_name  _;
    location ^~/ {
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header REMOTE-HOST $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      rewrite_by_lua_block {
        local req_uri = ngx.var.uri
        local idx = string.find(req_uri,"/",2)
        local req_sub_url = string.sub(req_uri,idx )
        ngx.req.set_uri(req_sub_url)
        ngx.log(ngx.INFO,"阶段-"..ngx.get_phase())
        ngx.log(ngx.INFO,"阶段-"..ngx.get_phase() .."-" .. ngx.var.uri)
      }

      access_by_lua_block{
        ngx.log(ngx.INFO,"阶段-"..ngx.get_phase())
        local res = ngx.location.capture("/getServerAddr")
        if not res or res.status ~= ngx.HTTP_OK then
          ngx.exit(500)
        end
        local body_data = res.body
        ngx.log(ngx.INFO,"子查询报文=" .. res.body)
        ngx.ctx.serverAddr = body_data
      }

      content_by_lua_block {
        ngx.log(ngx.INFO,"阶段-"..ngx.get_phase())
      }

      proxy_pass http://foo;
    }

     location = /getServerAddr {
       content_by_lua_block {
       local api_server = require("apigatewayserver")
       local serverAddr = api_server.getServerIp()
       ngx.say(serverAddr)
      }
    }
  }

  server {
    # this server is just for mocking up a backend peer here...
    listen 127.0.0.1:9090;
    location =/fake{
      content_by_lua_block {
        ngx.say("fake----9090")
      }
    }
  }

  upstream foo {
    server 0.0.0.1:1234;   # just an invalid address as a place holder
    balancer_by_lua_file ./api-gateway/lua/api_gateway/serverupstrame.lua;
    keepalive 10;  # connection pool
  }
}